
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(raadtools)
Loading required package: raster
Loading required package: sp
Warning message:
Installed Rcpp (0.12.11) different from Rcpp used to build dplyr (0.12.10).
Please reinstall dplyr to avoid random crashes or undefined behavior. 
> library(roc)
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> files <- chla_johnsonfiles(product = "MODISA")
> label <- "modisa"
> # # ## initialize the bin logic for MODISA
> init <- initbin(NUMROWS = 4320)
> 
> 
> library(raster)
> library(aceecostats)
> library(tibble)
> library(dplyr)
> library(feather)
> library(sf)
Linking to GEOS 3.5.0, GDAL 2.1.0, proj.4 4.8.0
> library(purrr)

Attaching package: ‘purrr’

The following objects are masked from ‘package:dplyr’:

    contains, order_by

> outf <- "/mnt/acebulk"
> db <- dplyr::src_sqlite("/mnt/acebulk/habitat_assessment_output.sqlite3")
> ## put a tidy end to the series
> maxdate <- ISOdatetime(2016, 12, 31, 23, 59, 59, tz = "GMT")
> aes_zone_data <- aes_zone@data[, c("ID", "SectorName", "Zone")]
> # ## here Continent just means High Latitude
> ## we trick it here so the ID overlay gets bundled together below
> aes_zone_data$Zone[aes_zone_data$Zone == "Continent"] <- "High-Latitude"
> 
> 
> ## unique integer from 0 to ~nrow(sf)/90 for each three month period
> #segs <- cumsum(c(0, abs(diff(unclass(factor(aes_season(getZ(obj))))))))
> 
> files$season_segs <- as.integer(factor(cumsum(c(0, abs(diff(unclass(factor(aes_season(files$date)))))))))
> 
> init <- initbin(NUMROWS = 4320)
> ## counts up from the south
> maxbin <- init$totbin/2
> ## unique grid map cell number
> #ucell <- tibble(cell_ = seq_len(ncell(ras)), area = values(gridarea))
> 
> ucell <- tibble(cell_ = seq_len(maxbin), area = 4)
> ## classify cell index by polygon
> # ucell$ID <- over(spTransform(xyFromCell(ras, ucell$cell_, spatial=TRUE), projection(aes_zone)), 
> #                  aes_zone)$ID
> xy <- sp::SpatialPoints(do.call(cbind, bin2lonlat(ucell$cell_, 4320)), proj4string = CRS("+init=epsg:4326"))
> ucell$ID <- over(spTransform(xy, projection(aes_zone)), 
+                  aes_zone)$ID
> 
> ucell <- ucell %>% filter(!is.na(ID))
> ## main loop over all season-years
> usegs <- distinct(files, season_segs)
> sparkline_list <- vector("list", nrow(usegs))
> 
> ## loop over season-years
> for (i in seq_along(sparkline_list)) {
+   #asub <- which(segs == unique(segs)[i])
+   afiles <-  usegs[i, ] %>% inner_join(files)
+   #a_obj <- setZ(readAll(subset(obj, asub)), getZ(obj)[asub])
+   
+   meanval <- lapply(afiles$fullname, readRDS) %>% bind_rows() %>% 
+     group_by(bin_num) %>% 
+     summarize(chla_johnson = mean(chla_johnson), chla_nasa = mean(chla_nasa))
+   ## aggregate min/max for 90 days per cell
+   #  meanval_map <- mean(a_obj, na.rm = TRUE)
+   start_date <- min(afiles$date)
+   ## mean of the min/max by region
+   sparkys <-  meanval %>% 
+     inner_join(ucell %>% inner_join(aes_zone_data), c("bin_num" = "cell_")) %>% 
+     group_by(SectorName, Zone) %>% 
+     # summarize(meanmin = mean(minval), meanmax = mean(maxval)) %>% 
+     summarize(chla_johnson = mean(chla_johnson), chla_nasa = mean(chla_nasa)) %>% 
+     mutate(season_year = start_date) %>% ungroup()
+   sparkline_list[[i]] <- sparkys
+   print(i)
+ }  
Joining, by = "season_segs"
Joining, by = "ID"
[1] 1
Joining, by = "season_segs"
Joining, by = "ID"
[1] 2
Joining, by = "season_segs"
Joining, by = "ID"
[1] 3
Joining, by = "season_segs"
Joining, by = "ID"
[1] 4
Joining, by = "season_segs"
Joining, by = "ID"
[1] 5
Joining, by = "season_segs"
Joining, by = "ID"
[1] 6
Joining, by = "season_segs"
Joining, by = "ID"
[1] 7
Joining, by = "season_segs"
Joining, by = "ID"
[1] 8
Joining, by = "season_segs"
Joining, by = "ID"
[1] 9
Joining, by = "season_segs"
Joining, by = "ID"
[1] 10
Joining, by = "season_segs"
Joining, by = "ID"
[1] 11
Joining, by = "season_segs"
Joining, by = "ID"
[1] 12
Joining, by = "season_segs"
Joining, by = "ID"
[1] 13
Joining, by = "season_segs"
Joining, by = "ID"
[1] 14
Joining, by = "season_segs"
Joining, by = "ID"
[1] 15
Joining, by = "season_segs"
Joining, by = "ID"
[1] 16
Joining, by = "season_segs"
Joining, by = "ID"
[1] 17
Joining, by = "season_segs"
Joining, by = "ID"
[1] 18
Joining, by = "season_segs"
Joining, by = "ID"
[1] 19
Joining, by = "season_segs"
Joining, by = "ID"
[1] 20
Joining, by = "season_segs"
Joining, by = "ID"
[1] 21
Joining, by = "season_segs"
Joining, by = "ID"
[1] 22
Joining, by = "season_segs"
Joining, by = "ID"
[1] 23
Joining, by = "season_segs"
Joining, by = "ID"
[1] 24
Joining, by = "season_segs"
Joining, by = "ID"
[1] 25
Joining, by = "season_segs"
Joining, by = "ID"
[1] 26
Joining, by = "season_segs"
Joining, by = "ID"
[1] 27
Joining, by = "season_segs"
Joining, by = "ID"
[1] 28
Joining, by = "season_segs"
Joining, by = "ID"
[1] 29
Joining, by = "season_segs"
Joining, by = "ID"
[1] 30
Joining, by = "season_segs"
Joining, by = "ID"
[1] 31
Joining, by = "season_segs"
Joining, by = "ID"
[1] 32
Joining, by = "season_segs"
Joining, by = "ID"
[1] 33
Joining, by = "season_segs"
Joining, by = "ID"
[1] 34
Joining, by = "season_segs"
Joining, by = "ID"
[1] 35
Joining, by = "season_segs"
Joining, by = "ID"
[1] 36
Joining, by = "season_segs"
Joining, by = "ID"
[1] 37
Joining, by = "season_segs"
Joining, by = "ID"
[1] 38
Joining, by = "season_segs"
Joining, by = "ID"
[1] 39
Joining, by = "season_segs"
Joining, by = "ID"
[1] 40
Joining, by = "season_segs"
Joining, by = "ID"
[1] 41
Joining, by = "season_segs"
Joining, by = "ID"
[1] 42
Joining, by = "season_segs"
Joining, by = "ID"
[1] 43
Joining, by = "season_segs"
Joining, by = "ID"
[1] 44
Joining, by = "season_segs"
Joining, by = "ID"
[1] 45
Joining, by = "season_segs"
Joining, by = "ID"
[1] 46
Joining, by = "season_segs"
Joining, by = "ID"
[1] 47
Joining, by = "season_segs"
Joining, by = "ID"
[1] 48
Joining, by = "season_segs"
Joining, by = "ID"
[1] 49
Joining, by = "season_segs"
Joining, by = "ID"
[1] 50
Joining, by = "season_segs"
Joining, by = "ID"
[1] 51
> 
> sp_line <- bind_rows(sparkline_list) %>% mutate(season = aes_season(season_year))
> #db$con %>% db_drop_table(table='chl_sparkline_tab')
> dplyr::copy_to(db, sp_line, "chl_sparkline_tab", temporary = FALSE)
> #saveRDS(sp_line, file.path(outf, "sparky_line.rds"))
> 
> 
> proc.time()
    user   system  elapsed 
1528.822  127.713 2384.131 
