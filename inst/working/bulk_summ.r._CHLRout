
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> decade_maker <- function(x) {
+   #cut(as.integer(format(x, "%Y")), c(1980, 1992, 2004, 2016), lab = c("1980-1992", "1991-2004","2002-2016"))
+   cut(as.integer(format(x, "%Y")), c(1977, 1987, 1997, 2007, 2017), 
+       lab = c("1977-1987", "1987-1998","1998-2007", "2007-2017"))
+ }
> aes_decades <- seq(as.POSIXct("1977-01-01"), length = 5, by = "10 years")
> devtools::use_data(aes_decades, overwrite = TRUE)
Saving aes_decades as aes_decades.rda to /home/mdsumner/aceecostats/data
> 
> 
> library(raster)
Loading required package: sp
> library(tibble)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> outf <- "/mnt/acebulk"
> library(aceecostats)

Attaching package: ‘aceecostats’

The following object is masked _by_ ‘.GlobalEnv’:

    aes_decades

> library(feather)
> #aes_region$index <- seq(nrow(aes_region))
> #aes_region$Shelf <- ifelse(aes_region$BathyClass == "Continent", "Shelf", "Ocean")
> 
> ## put a tidy end to the series
> maxdate <- ISOdatetime(2016, 12, 31, 23, 59, 59, tz = "GMT")
> 
> 
> vars <- c("chl") #c("ice",  "sst", "chl")
> for (ivar in seq_along(vars)) {
+ 
+   obj <- brick(file.path(outf, sprintf("%s.grd", vars[ivar])))
+   ras <- raster(obj)
+   
+   gridarea <- area(ras)/1e6
+   ## unique integer from 0 to ~nrow(sf)/90 for each three month period
+   segs <- cumsum(c(0, abs(diff(unclass(factor(aes_season(getZ(obj))))))))
+   
+   cell_tab <- vector("list", length(unique(segs)))
+   dates <- as.POSIXct(getZ(obj))
+   
+   for (i in seq_along(cell_tab)) {
+     asub <- which(segs == unique(segs)[i])
+     a_obj <- setZ(readAll(subset(obj, asub)), dates[asub])
+     tab <- tabit(min(a_obj, na.rm = TRUE)) 
+     tab <- tab %>% rename(min = val) %>% mutate(date = dates[asub[1]]) 
+     #%>% 
+     #  filter(min > 0)
+     tab$max<- values(max(a_obj, na.rm = TRUE))[tab$cell_]
+     tab$mean <- values(mean(a_obj, na.rm = TRUE))[tab$cell_]
+     tab$count <- values(calc(a_obj > 0, sum, na.rm = TRUE))[tab$cell_]
+     cell_tab[[i]] <- tab
+     print(i)
+     rm(tab, a_obj)
+     gc()
+   }
+   
+   ## now process the summaries down
+   
+   cell_tab <- bind_rows(cell_tab) %>% 
+     mutate(decade = decade_maker(date)) %>% 
+     filter(date <  maxdate) %>% 
+     filter(!is.na(decade))
+   
+   ucell <- distinct(cell_tab, cell_) %>% mutate(area = extract(gridarea, cell_))
+   ucell$ID <- over(spTransform(xyFromCell(ras, ucell$cell_, spatial=TRUE), projection(aes_zone)), 
+                       aes_zone)$ID
+   
+   ## summ_tab is the mean values over time
+   summ_tab <- cell_tab %>% inner_join(ucell %>% inner_join(aes_zone@data[, c("ID", "SectorName", "Zone")])) %>% 
+     mutate(Season = aes_season(date)) %>% 
+     group_by(Season, Zone, decade, SectorName,  date) %>%
+     summarize(min = mean(min), max = mean(max), count = mean(count)) %>% 
+     ungroup()
+   
+   ## raw_tab is all the cell values for density plots
+   raw_tab <- cell_tab %>% inner_join(ucell %>% inner_join(aes_zone@data[, c("ID", "SectorName", "Zone")])) %>% 
+     mutate(Season = aes_season(date))
+   
+   write_feather(cell_tab,  file.path(outf, sprintf("%s_cell_tab.feather", vars[ivar])))
+   rm(cell_tab)
+   # writeRaster(ras,        file.path(outf, sprintf("%s_raster.grd", vars[ivar])))
+   write_feather(summ_tab, file.path(outf, sprintf("%s_summ_tab.feather", vars[ivar])))
+   rm(summ_tab)
+   write_feather(raw_tab,  file.path(outf, sprintf("%s_raw_tab.feather", vars[ivar])))
+   rm(raw_tab)
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
Joining, by = "ID"
Joining, by = "cell_"
Joining, by = "ID"
Joining, by = "cell_"
> 
> 
> 
> 
> 
> proc.time()
    user   system  elapsed 
 823.852  452.024 1295.856 
