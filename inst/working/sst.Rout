
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> ## worker plot functions
> 
> dummyplot <- function() plot(1, 1, type = "p", axes = FALSE, xlab = "", ylab = "")
> 
> layout_m <- function() {
+   tx <- textConnection(
+     "1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3
+     1,1,9,9,9,9,9,1,3,3,11,11,11,11,11,3
+     1,1,9,9,9,9,9,1,3,3,11,11,11,11,11,3
+     1,1,9,9,9,9,9,1,3,3,11,11,11,11,11,3
+     1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3
+     1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3
+     1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3
+     1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3
+     1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3
+     1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3
+     2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4
+     2,2,10,10,10,10,10,2,4,4,12,12,12,12,12,4
+     2,2,10,10,10,10,10,2,4,4,12,12,12,12,12,4
+     2,2,10,10,10,10,10,2,4,4,12,12,12,12,12,4
+     2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4
+     2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4
+     2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4
+     2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4
+     2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4
+     2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4
+     5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7
+     5,5,13,13,13,13,13,5,7,7,15,15,15,15,15,7
+     5,5,13,13,13,13,13,5,7,7,15,15,15,15,15,7
+     5,5,13,13,13,13,13,5,7,7,15,15,15,15,15,7
+     5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7
+     5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7
+     5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7
+     5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7
+     5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7
+     5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7
+     6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8
+     6,6,14,14,14,14,14,6,8,8,16,16,16,16,16,8
+     6,6,14,14,14,14,14,6,8,8,16,16,16,16,16,8
+     6,6,14,14,14,14,14,6,8,8,16,16,16,16,16,8
+     6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8
+     6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8
+     6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8
+     6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8
+     6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8
+     6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8")
+   as.matrix(read.csv(tx, header=F))
+ }
> textheadtail <- function(x, y) {
+   xx <- c(head(x, 1), tail(x, 1))
+   yy <- c(head(y, 1), tail(y, 1))
+   points(xx, yy, pch=19, cex=0.3, col=c("grey","black"))
+   text(xx, yy, label = round(yy, 1), pos=2, xpd=NA, cex=0.65, offset=0.2)
+   
+ }
> path2seg <- function(x) {
+   ## this is a trick of array logic to generate paired indexes from a sequence
+   head(suppressWarnings(matrix(x, nrow = length(x) + 1, ncol = 2, byrow = FALSE)), -2L)
+ }
> segmentlines <- function(x, col, ...) {
+   ind <- path2seg(seq(nrow(x)))
+   segments(x[ind[,1], 1], x[ind[,1], 2], x[ind[,2], 1], x[ind[,2], 2], 
+            col = col, ...)
+ }
> sector_colour <- function(secname) {
+   setNames(c("#7CAE00", "#00BFC4","#C77CFF", "#F8766D"), 
+            c("Atlantic","Indian", "EastPacific","WestPacific"))[secname]
+   
+ }
> sector_name <- function(secname) {
+   setNames(c("Atlantic","Indian","East\nPacific","West\nPacific"), 
+            c("Atlantic","Indian", "EastPacific","WestPacific"))[secname]
+ }
> decselect <- function(n) {
+   stopifnot(length(n) == 1L)
+   #c("1980-1992", "1991-2004","2002-2016")[n]
+   c("1981-1990", "1990-1999","1999-2008", "2008-2016")[n]
+ }
> do_density <- function(v, w = NULL) {
+   the.his <- hist(v, breaks=50, plot = FALSE)
+   multiplier <- (the.his$counts / the.his$density)[1]
+   the.den <- density(v, from=min(v), to=max(v), weights = w)
+   scl <- function(x) (x - min(x))/diff(range(x))
+   the.den.df<- data.frame(x=the.den$x, y=scl(the.den$y))
+   the.den.df <- the.den.df[the.den.df$x >= min(v) & the.den.df$x <= max(v),]
+   the.den.df$y[the.den.df$y > 1] <- 1
+   the.den.df
+ }
> 
> 
> ## preparation
> library(aceecostats)
> library(raster)
Loading required package: sp
> library(feather)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> ## local path to required cache files
> datapath <- "/mnt/acebulk"
> 
> 
> ## update for each variable 
> ## all must be FALSE, 
> do_chl <- do_sst <- do_ice <- do_mag <- FALSE
> 
> ## then set one to TRUE
> do_chl <- TRUE
> 
> 
> ## date range for the sparkline
> sparkline_range <- ISOdatetime(c(1980, 2016), c(1, 11), 1, 0, 0, 0, tz = "GMT")
> 
> ## variable specific clauses
> if (do_mag) {
+   outpdf <- "mag_assess_03.pdf"
+   ras <- raster(file.path(datapath, "mag_raster.grd"))
+   cell_tab <- read_feather(file.path(datapath, "mag_tab.feather")) %>% 
+     filter(min_mag > 0) %>% 
+     rename(min = min_mag, max = max_mag, mean = mean_mag) %>% 
+     mutate(min = log(min), max = log(max), mean = log(mean)) 
+   varlabel <- function(ttext) {
+     bquote(.(ttext)~ "log(EKE) m/s") 
+   }
+   
+   min_max <- c(-9, 1.3)
+   
+   decselect <- function(n) {
+     stopifnot(length(n) == 1L)
+     c("1991-2004","2002-2016")[n]
+   }
+   # lcols <- c("gray40", "black")
+ }
> if (do_ice) {
+   outpdf <- "ice_assess_04.pdf"
+   ras <- raster(file.path(datapath,"ice_raster.grd"))
+   cell_tab <- read_feather(file.path(datapath,"ice_tab.feather")) 
+   ##%>%   rename(min = min_ice, max = max_ice, mean = mean_ice)
+   varlabel <- function(ttext) {
+     bquote(.(ttext)~ "ICE %") 
+   }
+   min_max <- c(-5, 105)
+ }
> 
> if (do_sst) {
+   outpdf <- "inst/working/sst_assess_08.pdf"
+   dolog = ""
+   ras <- raster(file.path(datapath, "sst_raster.grd"))
+   ## cell_tab <- read_feather(file.path(datapath, "sst_cell_tab.feather")) 
+   summ_tab <- read_feather(file.path(datapath, "sst_summ_tab.feather")) 
+   raw_tab <-  read_feather(file.path(datapath, "sst_raw_tab.feather")) 
+   varlabel <- function(ttext) {
+     bquote(.(ttext)~ "SST" ~ (degree*C)) 
+   }
+   seclab <- 0
+   min_max <- c(-2, 22)
+   usr <- c(-5, 100, -5, 100)
+ }
> 
> 
> if (do_chl) {
+   outpdf <- "inst/working/chl_assess_09.pdf"
+   dolog = "x"
+   ras <- raster(file.path(datapath,"chl_raster.grd"))
+   ## not used
+   ## cell_tab <- read_feather(file.path(datapath, "chl_cell_tab.feather"))  
+   #%>% mutate(min = log(min), max = log(max), mean = log(mean))
+   summ_tab <- read_feather(file.path(datapath, "chl_summ_tab.feather")) 
+   #%>%  mutate(min = log(min), max = log(max))  ## no mean
+   
+   raw_tab <-  read_feather(file.path(datapath, "chl_raw_tab.feather")) 
+   #%>%   mutate(min = log(min), max = log(max), mean = log(mean))
+   seclab <- 0.06
+   varlabel <- function(ttext) {
+     bquote(.(ttext)~ "CHL-a mg m-3") 
+   }
+   min_max <- c(0.01, 3)
+   usr <- c(0.000000001, 100, -5, 100)
+ }
> 
> 
> total_areas <- aes_region@data %>% group_by(SectorName, Zone) %>% summarize(area_km2 = sum(area_km2))
> total_areas$area_factor <- total_areas$area_km2 / c(Atlantic = 1.3, EastPacific = 1.4, Indian = 1.6, WestPacific = 1.15)[total_areas$SectorName]
> 
> #total_areas$area_factor <- 3000000
> ## plot specifics
> lwdths <- c(6,4,2,1)
> lcols <- grey(seq(1, 0, length = nlevels(raw_tab$decade) + 2))[-c(1, 2)]
> den.range <- c(0, 2)
> dplot <- TRUE
> scaleval <- if (dolog == "x")  function(x) log(x) else function(x) x
> unscaleval <- if(dolog == "x") function(x) exp(x) else function(x) x
> seas <- "Summer"; zone <- "Polar"
> if (dplot) pdf(outpdf)
> for (seas in c( "Summer", "Winter")) {
+   for (zone in c("Polar",  "Temperate")) {
+     
+     #for (seas in "Spring") {
+     #  for (zone in "Polar") {
+     
+     layout(layout_m())
+     op <- par(mar=c(0,0,0,0), oma=c(2.5, 0.95, 0.5, 0.5), tcl=0.2, cex=1.25, mgp=c(3, 0.25, 0), cex.axis=0.75, col="gray40", col.axis="gray40", fg="gray40")
+     ## DENSITY PLOTS
+     for (sector in c("Atlantic",  "Indian", "EastPacific", "WestPacific")) {
+       this_area <- subset(total_areas, Zone == zone & SectorName == sector)
+       den.range <- c(0, this_area$area_km2/this_area$area_factor)
+       titletext<- paste(seas, zone)
+       asub <- dplyr::filter(raw_tab, SectorName == sector & Zone == zone & Season == seas)
+       if (nrow(asub) < 10) {
+         dummyplot()
+         dummyplot()
+         next;
+       }
+       with(asub, {
+         plot(min_max, den.range, type = "n", axes = FALSE, xlab = "", ylab = "", log = dolog)
+         #usr <- par("usr")
+         
+         polygon(expand.grid(x = usr[1:2], y = usr[3:4])[c(1, 2, 4, 3), ], col = paste0(sector_colour(sector),40))
+         #polygon(expand.grid(x = min_max, y = den.range)[c(1, 2, 4, 3), ], col = paste0(sector_colour(sector),40))
+         if (sector %in% c("Atlantic", "EastPacific")) mtext("min", side = 2)
+        # text(0, den.range[2]*0.9, lab = sector_name(sector), cex=0.5)
+         for (k in seq_along(lcols)) {
+           vals <- min[decade == decselect(k)]
+           wgt <- area[decade == decselect(k)] 
+           if (length(vals) < 1 | all(is.na(vals))) next;
+           
+           dens.df <- do_density(scaleval(vals), w = wgt)
+           lines(unscaleval(dens.df$x), dens.df$y, col=lcols[k], lwd=lwdths[k])
+           print(k)
+         }
+         
+         #usr <- par("usr")
+         # if (dolog == "x") usr[c()] <- log(usr)
+         
+         #do_rect(usr, paste0(sector_colour(sector),40))
+         
+         #rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],
+         #     col = paste0(sector_colour(sector),40))
+         box()
+       
+         mtext(side=1, varlabel(titletext) ,outer =T, line=1.5, cex=1)
+         plot(min_max, den.range, type = "n", axes = FALSE, xlab = "", ylab = "max", log = dolog)
+         if (grepl("Pacific", sector)) axis(1)
+      
+         #polygon(expand.grid(x = min_max, y = den.range)[c(1, 2, 4, 3), ], col = paste0(sector_colour(sector),40))
+         #usr <- par("usr")
+         polygon(expand.grid(x = usr[1:2], y = usr[3:4])[c(1, 2, 4, 3), ], col = paste0(sector_colour(sector),40))
+         if (sector %in% c("Atlantic", "EastPacific")) mtext("max", side = 2)
+         text(seclab[1], den.range[2]*0.9, lab = sector_name(sector), cex=0.5)
+         for (k in seq_along(lcols)) {
+           vals <- max[decade == decselect(k)]
+           if (length(vals) < 1 | all(is.na(vals))) next;
+           if (length(vals) < 1) next;
+           wgt <- area[decade == decselect(k)]
+           dens.df <- do_density(scaleval(vals), w = wgt)
+           lines(unscaleval(dens.df$x), dens.df$y, col=lcols[k], lwd=lwdths[k])
+         }
+        # rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],
+       #       col = paste0(sector_colour(sector),40))
+         box()
+       
+         
+       }
+       
+       )
+       
+     }
+     mtext(side=1, varlabel(titletext) ,outer =T, line=1.5, cex=1)
+     ## SPARKLINES
+     for (sector in c("Atlantic",  "Indian", "EastPacific", "WestPacific")) {
+       asub <- subset(summ_tab, SectorName == sector & Zone == zone & Season == seas)
+       if (nrow(asub) < 10) {
+         dummyplot()
+         dummyplot()
+         next; 
+       } 
+       
+       shouldersub <- subset(summ_tab, SectorName == sector & Zone == zone & Season == c(Summer = "Spring", Winter = "Autumn")[seas])
+       
+       
+       with(asub, {
+         sparkline_yrange <- range(c(min, shouldersub$min))
+         plot(sparkline_range, sparkline_yrange, type = "n", axes = FALSE, xlab = "", ylab = "")
+         segmentlines(cbind(date, min), col = lcols[decade])
+         abline(h = mean(min))
+         textheadtail(date, min)
+         
+         ## do the shoulder season
+         segmentlines(cbind(shouldersub$date, shouldersub$min), col = lcols[decade], lty = 2)
+         
+         
+         sparkline_yrange <- range(c(max, shouldersub$max))
+         plot(sparkline_range, sparkline_yrange, type = "n", axes = FALSE, xlab = "", ylab = "")
+         segmentlines(cbind(date, max), col = lcols[decade])
+         abline(h = mean(max))
+         textheadtail(date, max)
+         
+         
+         ## do the shoulder season
+         segmentlines(cbind(shouldersub$date, shouldersub$max), col = lcols[decade], lty = 2)
+         
+       }
+       )
+       
+     }
+     par(op)
+     
+   }}
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
[1] 2
[1] 3
[1] 4
There were 50 or more warnings (use warnings() to see the first 50)
> 
> if (dplot) dev.off()
null device 
          1 
> 
> 
> 
> proc.time()
   user  system elapsed 
305.456 142.564 529.629 
